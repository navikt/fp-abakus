name: Bygg og deploy

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '**.MD'
      - '.gitignore'
      - 'LICENSE'
      - 'CODEOWNERS'
      - 'dokumentasjon/**'
      - 'lokalutvikling/**'
  schedule:
    - cron: '0 4 * * 1'
      
env:
  IMAGE_BASE_CR: ghcr.io/${{ github.repository }}
jobs:
  build:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: fpabakus_unit
          POSTGRES_PASSWORD: fpabakus_unit
          POSTGRES_DB: fpabakus_unit
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.11
          
      - name: Set cache key
        run: |
          echo "CACHE_KEY=$(expr $(date +%V) - 1 + 1)" >> $GITHUB_ENV
          echo "TIMESTAMP=$(expr $(date +%Y%m%d%H%M%S))" >> $GITHUB_ENV
      - uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ env.CACHE_KEY }}
          
      - name: Build artifacts & deploy
        shell: bash
        run: |
          echo "TAG=$TIMESTAMP-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
          echo "Building artifacts $(echo $GITHUB_SHA | cut -c1-7)"
          mvn jacoco:prepare-agent install -e --quiet --batch-mode --file pom.xml -Drevision= -Dchangelist= -Dsha1=$TIMESTAMP-$(echo $GITHUB_SHA | cut -c1-7) -Dfile.encoding=UTF-8 -Djacoco.destFile=$(pwd)/target/jacoco.exec
          mvn jacoco:report sonar:sonar -e --quiet --batch-mode --file pom.xml -Djacoco.dataFile=$(pwd)/target/jacoco.exec -Dsonar.projectKey="navikt_fp-abakus" -Dsonar.host.url='https://sonarcloud.io' -Dsonar.organization=navit -Dsonar.login=${SONAR_TOKEN}
          echo "Deployed artifacts"
        env:
          TZ: "Europe/Oslo"
          GITHUB_USERNAME: x-access-token
          GITHUB_PASSWORD: ${{ secrets.GH_ACCESS_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          DATASOURCE_HOST: localhost
          DATASOURCE_PORT: ${{ job.services.postgres.ports[5432] }} # get randomly assigned published port
      
      - name: Release Drafter
        uses: release-drafter/release-drafter@v5.12.1
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Bygg og push docker-image
        env:
          GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
        run: |
          docker build --pull --tag ${IMAGE_BASE_CR}:${TAG} --tag ${IMAGE_BASE_CR}:latest .
          echo "${{ secrets.GH_ACCESS_TOKEN }}" | docker login --username "x-access-token" --password-stdin ghcr.io
          docker push ${IMAGE_BASE_CR}:${TAG}
          docker push ${IMAGE_BASE_CR}:latest

      - name: Lukk gamle issues
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['deployment']
            }).then(response => {
              response.data.forEach(issue => {
                github.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
              });
            });
            
      -  name: Opprett deployment issue
         id: createdeployissue
         if: success()
         uses: actions/github-script@v3
         with:
           github-token: ${{secrets.GITHUB_TOKEN}}
           script: |
               github.issues.create( {
                 owner: context.issue.owner,
                 repo: context.issue.repo,
                 labels: ['deployment'],
                 body: 'Kommenter enten "/promote dev-fss" eller "/promote prod-fss"',
                 title: 'Deploy av ${{ env.TAG }}'})
               .then(response => {
                       core.setOutput('number', response.data.number);
                });
                
      - name: Trigg deploy til dev
        if: success()
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          issue-number: ${{ steps.createdeployissue.outputs.number }}
          body: /promote dev-fss

      - name: Trigger autotest for fpsak/fpabakus
        if: success()
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          repository: navikt/fpsak-autotest
          event-type: fpabakus-autotest
          client-payload: '{ "trigger": "${{ github.repository }}", "version": "${{ env.TAG }}", "issue-number": "${{ steps.createdeployissue.outputs.number }}" }'

      - name: Trigger verdikjedetestene i fpsak-autotest prosjektet
        if: success()
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          repository: navikt/fpsak-autotest
          event-type: fpabakus-verdikjede
          client-payload: '{ "trigger": "${{ github.repository }}", "version": "${{ env.TAG }}", "issue-number": "${{ steps.createdeployissue.outputs.number }}" }'

      - name: Trigger k9-verdikjede
        if: success()
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          repository: navikt/k9-verdikjede
          event-type: saksbehandling-verdikjede
          client-payload: '{ "trigger": "${{ github.repository }}", "version": "${{ env.TAG }}", "image": "${{ github.event.client_payload.github.payload.package.package_version.release.url }}"}'

